//noinspection GroovyUnusedAssignment
@Library("jenkins-libraries@main") _

def env
def run
def stg

node {
    try {
        stage('Checkout') {
            checkout scm
        }

        stage('Setup') {
            def cfg = yamlFile(params.CONFIGURATION_FILE)
            env = cfg.env
            run = cfg.run
            stg = cfg.stg

            println "Env Params: ${env}"
            println "Run Params: ${run}"
            println "Stg Params: ${stg}"
        }

        stage('Maven Build') {
            sh "mvn clean install -DskipTests=true"
        }

        if (stg.test) {
            stage('Maven Test') {
                sh 'mvn test'
            }
        }

        stage('Analysis') {
            def analysisStagesMap = [:]
            if (stg.analysis.jacoco) {
                analysisStagesMap.put("JaCoCo Analysis", jaCoCoAnalysis())
            }
            if (stg.analysis.sonarqube) {
                analysisStagesMap.put("SonarQube Analysis", sonarQubeAnalysis(env.sonarqube.env.name, env.sonarqube.credential.id))
            }
            if (stg.analysis.nexusiq) {
                analysisStagesMap.put("Nexus IQ Analysis", nexusIqAnalysis(env.nexus.application.name))
            }
            if (stg.analysis.yagaan) {
                analysisStagesMap.put("Yagaan Analysis", yagaanAnalysis())
            }
            parallelOrSerialStages.call(run.stage.parallel, analysisStagesMap)
        }

        stage('Maven Package') {
            sh "mvn package -DskipTests=true"
        }

        if(stg.artifact.artifactory || stg.artifact.nexus) {
            stage('Artifact Push') {
                def artifactRepositoryStagesMap = [:]
                if (stg.artifact.artifactory) {
                    artifactRepositoryStagesMap.put("Artifactory Push", artifactoryRepositoryPush(env.artifactory.server.id, env.artifactory.server.url, env.artifactory.repository.url, env.artifactory.build.name, env.artifactory.project.name, env.artifactory.credential.id))
                }
                if (stg.artifact.nexus) {
                    artifactRepositoryStagesMap.put("Nexus Push", nexusRepositoryPush(env.nexus.server.url, env.nexus.repository.name, env.nexus.version.name, env.nexus.protocol.name, env.nexus.credential.id))
                }
                parallelOrSerialStages.call(run.stage.parallel, artifactRepositoryStagesMap)
            }
        }
        if (stg.deploy) {
            stage("Deploy") {
                okteto.call(env.okteto.server.url, env.okteto.repository.name, env.okteto.repository.url, env.okteto.deployment.name, env.okteto.credential.id)
            }
        }
    } catch (e) {
        throw e
    } finally {
        junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml'
    }
}

def jaCoCoAnalysis() {
    return {
        stage('JaCoCo Analysis') {
            jacoco(execPattern: 'target/jacoco.exec')
        }
    } as Object
}

def sonarQubeAnalysis(sonarqubeEnv, sonarqubeCredentialId) {
    return {
        stage('SonarQube Analysis') {
            sonarqube.call(sonarqubeEnv, sonarqubeCredentialId)
        }
    } as Object
}

def nexusIqAnalysis(nexusApplication) {
    return {
        stage('Nexus IQ Analysis') {
            nexusPolicyEvaluation advancedProperties: '', enableDebugLogging: false, failBuildOnNetworkError: false, iqApplication: selectedApplication(nexusApplication), iqStage: 'build', jobCredentialsId: ''
        }
    } as Object
}

def yagaanAnalysis() {
    return {
        stage('Yagaan Analysis') {
            sh "/var/lib/jenkins/workspace/yag-scanner/bin/yag-scanner -t 6684e5faf948eb6d2d66a43fe537956627dbbb38 /var/lib/jenkins/workspace/spring-petclinic_cicd-scripted_gitlab"
        }
    } as Object
}

def artifactoryRepositoryPush(artifactoryServerId, artifactoryServerUrl, artifactoryRepositoryUrl, artifactoryBuildName, artifactoryProject, artifactoryCredentialId) {
    return {
        stage('Artifactory Repository Push') {
            artifactory.call(artifactoryServerId, artifactoryServerUrl, artifactoryRepositoryUrl, artifactoryBuildName, artifactoryProject, artifactoryCredentialId)
        }
    } as Object
}

def nexusRepositoryPush(nexusServerUrl, nexusRepositoryName, nexusVersion, nexusProtocol, nexusCredentialId) {
    return {
        stage('Nexus Repository Push') {
            nexusRepository.call(nexusServerUrl, nexusRepositoryName, nexusVersion, nexusProtocol, nexusCredentialId)
        }
    } as Object
}
